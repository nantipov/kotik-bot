name: Master build and Docker push

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Calculate tags
      id: calctags
      run: |
        DOCKER_IMAGE=nantipov/kotik-bot
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        SHA=sha-${GITHUB_SHA::8}
        IMAGE_SHA=${DOCKER_IMAGE}:${SHA}
        if [ "${{ github.event_name }}" = "push" ]; then
          TAGS="$TAGS,$IMAGE_SHA"
        fi
        echo ::set-output name=docker_image_k8s::${IMAGE_SHA}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo "${SHA}" > $GITHUB_WORKSPACE/src/main/resources/version

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build

  deploy:
    needs: [build]
    runs-on: ubuntu-20.04
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.calctags.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.calctags.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Update deployment file
        run: IMAGE=${{ steps.calctags.outputs.docker_image_k8s }} && sed -i 's|<IMAGE>|'${IMAGE}'|' $GITHUB_WORKSPACE/k8s/deployment.yaml

      - name: Save DigitalOcean kubeconfig with short-lived credentials
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 1167a47c-3103-4366-9b64-95be3ffae03a

      - name: Deploy to DigitalOcean Kubernetes
        run: kubectl apply -f $GITHUB_WORKSPACE/k8s/deployment.yaml

      - name: Verify deployment
        run: kubectl rollout status deployment/kotik-bot-deployment